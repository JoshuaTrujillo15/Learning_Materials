/*SQLite Learning Materials
CREATED BY: Joshua Trujillo
CREATED ON: 08/05/2020
DESCRIPTION: Commands with comments to learn SQLite
CREDIT: SQL QuickStart Guide by Walter Shields, thank you!
*/

/*
FUNCTIONS

String:
INSTR()
LENGTH()
LOWER()
REPLACE()
RTRIM()
SUBSTR()
TRIM()
UPPER()
||

Date:
DATE()
DATETIME()
JULIANDAY()
STRFTIME()
TIME()
'NOW'

Aggregate:
AVG()
COUNT()
MAX()
MIN()
SUM()
*/



/*
ARGS FOR STRFTIME()

Format:
'%x' replace x with appropriate letter
d day of month 00
f fractional seconds SS.SSS
H hour 00-24
j day of year 001-366
J julian day number
m month 01-12
M minute 00-59
s seconds since 1970-01-01
S seconds 00-59
w day oof week 0-6 (sunday==0)
W week of the year 00-53
Y year 0000-9999

Timestring:
'YYYY-MM-DD' date
'now' current date and time
'DATETIME' field Database field in a date and/or time format

Modifier:
'+ X days' add X=numDays to result
'+ X months' add X=numMonths
'+ X years' add X=numYears
'- X days'/months/years
'start of the day' modifies time code to represent start of day
'start of the month'
'start of the year'
*/



----------------------------------------------------------------------------------------------------
SELECT
	*
FROM
	albums;
--Selects all fields from sTunes database, albums table



----------------------------------------------------------------------------------------------------
SELECT
	FirstName,
	LastName,
	Email
FROM
	customers;
--Selects names and emails from customers



----------------------------------------------------------------------------------------------------
SELECT
	FirstName AS 'First Name',
	LastName AS [Last Name],
	Email AS EMAIL
	Phone CELL
FROM
	customers;
--Same as above (approx) but uses alias (AS) for aesthetic reasons; if alias >1 word, need single quote or brackets '' []



----------------------------------------------------------------------------------------------------
--Arithmetic
SELECT
	Total AS 'Original Amount',
	Total + 10 AS 'Addition',
	Total - 10 AS 'Subtraction',
	Total * 10 AS 'Multiplication',
	Total / 10 AS 'Division',
	Total % 10 AS 'Modulo'
FROM
	invoices
ORDER BY
	Total DESC;




----------------------------------------------------------------------------------------------------
--Selects invoices with 2 purchases of .99 (1.89)
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	Total
FROM
	invoices
WHERE
	Total=1.98
ORDER BY
	InvoiceDate;
--WHERE: '=' for one value, IN() for multiple
--WHERE LIKE 'T% starts with; '%T' ends with; '%T%' anywhere; 'T%T' starts and ends with;



----------------------------------------------------------------------------------------------------
--INNER JOIN joins only matching fields between tables
--LEFT OUTER JOIN (LEFT JOIN) joins all left with only matching right fields
--RIGHT OUTER JOIN (RIGHT JOIN) Not supported in SQLite, opposite LEFT JOIN



--three tables joined
SELECT
	e.FirstName,
	e.LastName,
	e.EmployeeId,
	c.FirstName,
	c.LastName,
	c.SupportRepId,
	i.CustomerId,
	i.Total
FROM
	invoices AS i
INNERJOIN
	customers AS c
ON
	i.CustomerId = c.CustomerId
INNER JOIN
	employees AS e
ON
	c.SupportRepId = e.EmployeeId
ORDER BY
	i.Total DESC
LIMIT
	10;



----------------------------------------------------------------------------------------------------
--Return artists without albums
SELECT
	ar.ArtistId AS [Artist ArtistId],
	al.ArtistId AS [Album ArtistId],
	ar.Name AS [Artist Name],
	al.Title AS [Album Title]
FROM
	artists as ar
LEFT JOIN
	albums as al
ON
	ar.ArtistId = al.ArtistId
WHERE
	al.ArtistId IS NULL;
	


--COUNT() function
--counts number of last names starting with B
SELECT
	COUNT(LastName) AS [Name Count]
FROM 
	customers
WHERE 
	LastName LIKE 'B%';



----------------------------------------------------------------------------------------------------
--Conatenation
SELECT
	FirstName || ' ' || LastName AS [Name],
	Address || ', ' || City || ', ' || State || ' ' || PostalCode AS [MailingAddress]
FROM
	customers
WHERE
	country = 'USA';



----------------------------------------------------------------------------------------------------
--substrings index 1
--SUBSTR (X,Y); SUBSTR (X,Y,Z);
--x (str) string, starting with y (int), z (int) characters long
SELECT
	PostalCode,
	SUBSTR(PostalCode,1,5) AS [Five Digit Postal Code]
FROM
	customers
WHERE
	country = 'USA';



----------------------------------------------------------------------------------------------------
--UPPER() str to uppercase
--LOWER() str to lowercase
--STRFTIME(format, timestring, modifier, modifier, ...) str format time function
--'NOW' timestring for currernt time



SELECT
	STRFTIME('The year is: %Y The day is: %d The month is: %m, '2011-05-22') AS [Text with Conversion Specifications]



SELECT
	LastName,
	FirstName,
	STRFTIME('%Y-%m-%d,BirthDate) AS [Birthday No Timecode],
	STRFTIME('%Y-%m-%d,now) - STRFTIME('%Y-%m-%d,BirthDate) AS [Age]
FROM
	employees
ORDER BY
	Age;



----------------------------------------------------------------------------------------------------
--ROUND(x,y) x=num; y=digitsAfterDecimal
--WHERE filters data
--HAVING filters aggregate funtion data (After GROUP BY only)
SELECT
	BillingCity,
	ROUND(AVG(Total),2)
FROM
	invoices
WHERE 
	BillingCity LIKE 'L%'
GROUP BY
	BillingCity
HAVING
	AVG(Total > 5)
ORDER BY
	BillingCity;
--selects from invoices, groups city averages with total sales greater than 5, ordered by city



----------------------------------------------------------------------------------------------------
--GROUP BY works with multiple fields
--First  by country, then city
SELECT
	BillingCountry,
	BillingCity,
	AVG(Total)
FROM
	invoices
GROUP BY
	BillingCountry, BillingCity
ORDER BY
	BillingCountry;



----------------------------------------------------------------------------------------------------
--Review excersize
--Single-line mailing list, US customers, capitalized full name, full address, 5 digit zip
--EXAMPLE: FRANK HARRIS 1600 Amphitheater Parkway, Mountain View, CA 94043
SELECT
	UPPER(FirstName)|| ' ' || UPPER(LastName) || ' ' || Address || ', ' || City || ', ' || State || ' ' || SUBSTR(PostalCode,1,5)
FROM
	customers
WHERE
	Country LIKE 'USA';



----------------------------------------------------------------------------------------------------
--Top 10 customers of all time by revenue
SELECT
	c.FirstName || ' ' || c.LastName AS 'Name'
	SUM(i.Total) AS 'Total Revenue'
FROM
	customers AS c
INNER JOIN
	invoices AS i
ON
	c.CustomerId = i.CustomerId
ORDER BY 
	SUM(i.Total) DESC
LIMIT
	10;



----------------------------------------------------------------------------------------------------
--SUBQUERIES--

--Aggregate Functions
--Compares selected totals to (average of totals)
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	Total
FROM
	invoices
WHERE
	Total < (select
			AVG(Total)
		from
			invoices)
ORDER BY
	Total DESC;



----------------------------------------------------------------------------------------------------
--Subquery in SELECT statement
--main query groups city averages; subquery returns global average alongside city average
SELECT
	BillingCity,
	ROUND(AVG(Total),2) AS [City Average],
	(select
		round(avg(total),2)
	from
		invoices) AS [Global Average]
FROM
	invoices
GROUP BY
	BillingCity
ORDER BY
	BillingCity



----------------------------------------------------------------------------------------------------
--WHERE clause in subquery
--find sales from 2013 that exceed the highest sale from 2009-2012
SELECT
	InvoiceDate,
	BillingCity,
	Total
FROM
	invoices
WHERE
	InvoiceDate >= '2013-01-01' AND Total >
	(select
		max(Total)
	from
		invoices
	where
		InvoiceDate < '2013-10-10');



----------------------------------------------------------------------------------------------------
--EXAMPLE
--num of invoices on or before jan 1, 2010 above average amount
SELECT
	COUNT(Total) AS [Count]
FROM
	invoices
WHERE
	InvoiceDate <= '2010-01-01' AND Total > 
	(select
		avg(total)
	from
		invoices);



----------------------------------------------------------------------------------------------------
--Subqueries without aggregate functions
--invoices received after InvoiceId 251
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity
FROM
	invoices
WHERE
	InvoiceDate > 
	(select
		InvoiceDate
	from
		invoices
	where
		InvoiceId = 251)



----------------------------------------------------------------------------------------------------
--subquery with multiple returns
--returns invoices from same day as 251,252,255
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity
FROM
	invoices
WHERE
	InvoiceDate IN
	(select
		InvoiceDate
	from 
		invoices
	where
		InvoiceId in (251,252,255))



----------------------------------------------------------------------------------------------------
--DISTINCT clause omits repeats 
--returns tracks not sold on any invoices
SELECT
	TrackId,
	Composer,
	Name
FROM
	tracks
WHERE
	TrackId NOT IN  
	(select
		distinct TrackId
	from
		invoice_items);
		
		
		
----------------------------------------------------------------------------------------------------
--EXAMPLE count invoices in 2010 that are above average sale
SELECT
	COUNT(InvoiceId)
FROM
	invoices
WHERE
	InvoiceDate IN ('2010-01-01', '2011-01-01') AND Total >
	(select
		avg(Total)
	from
		invoices);



--------------------------------------------------------------------------------------------
